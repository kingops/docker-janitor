#!/bin/bash

FREE_SPACE_PERCENT_THRESHOLD=${1:-70} # disk space usage threshold
FREE_INODE_PERCENT_THRESHOLD=${2:-70} # inode usage threshold
PRUNE_FILTER_UNTIL_DAYS=${3:-30}
USE_PRUNE_FILTER_UNTIL=Y # docker cli 1.14.0+ and api v1.26+
DOCKER_STORAGE_DIR=/var/lib/docker

get_docker_storage_usage() {
  METRIC=$1
  echo $(df $DOCKER_STORAGE_DIR --output=$METRIC | tail -n -1 | grep -P -o "\d+")
}

prune_is_required() {
  [ "$(get_docker_storage_usage pcent)" -gt "${FREE_SPACE_PERCENT_THRESHOLD}" ] \
    || [ "$(get_docker_storage_usage ipcent)" -gt "${FREE_INODE_PERCENT_THRESHOLD}" ] && return 0
}

do_docker_prune() {
  DOCKER_PRUNE_FILTER="$([ "$1" != "" ] && echo "--filter until=$(($1*24))h")"
  docker container prune -f "${DOCKER_PRUNE_FILTER}" &> /dev/null
  docker image prune -af "${DOCKER_PRUNE_FILTER}" &> /dev/null
  docker volume prune -f &> /dev/null
}

if prune_is_required; then
  echo "The filesystem containing ${DOCKER_STORAGE_DIR} exceeded a disk usage threshold; pruning docker elements" \
    | ts '[%Y-%m-%d %H:%M:%S]'
  if [ "${USE_PRUNE_FILTER_UNTIL}" = "Y" ]; then
    # prune items older than X in days
    do_docker_prune "${PRUNE_FILTER_UNTIL_DAYS}"
    prune_is_required && do_docker_prune
    echo "Disk usage after cleanup: $(get_docker_storage_usage pcent)%" | ts '[%Y-%m-%d %H:%M:%S]'
  else
    # prune everything
    do_docker_prune
  fi
fi
